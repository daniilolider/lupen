import pandas as pd
import requests
from pathlib import Path
from json import loads


def vuz2_request(chat_id: int, number_of_control: int) -> str:
    """–î–µ–ª–∞–µ—Ç –ø–∞—Ä—Å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å http://vuz2.bru.by/rate/"""

    path = Path('bot', 'data', 'databases', 'vuz2_list', 'vuz2_list.json')
    with open(path, 'r', encoding='utf-8') as vuz2_list:
        vuz2_list = loads(vuz2_list.read())

    vuz2_user_id = vuz2_list[str(chat_id)]

    url = f'http://vuz2.bru.by/rate/{str(vuz2_user_id)}/'
    result = requests.get(url)
    table_html = result.content.decode(encoding="cp1251", errors="ignore")
    table_start = table_html.find("<table")
    table_end = table_html.find("</table>") + 8
    table = table_html[table_start: table_end]
    df = pd.read_html(table)

    conrol_names = {0: '‚ùóÔ∏è–≠–∫–∑–∞–º–µ–Ω—ã',
                    1: '‚ùï–ó–∞—á–µ—Ç—ã',
                    3: '1Ô∏è‚É£–ü–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å',
                    4: '2Ô∏è‚É£–í—Ç–æ—Ä–æ–π –º–æ–¥—É–ª—å',
                    7: '‚úÖ–ò—Ç–æ–≥–æ–≤—ã–π –º–æ–¥—É–ª—å'}

    text = ''
    if number_of_control == 3 or number_of_control == 4 or number_of_control == 7:

        marks = []
        for i in range(1, len(df[0].iloc[0])):
            marks.append(df[0].iloc[number_of_control, i])

        text = f'<b><u>{conrol_names[number_of_control]}</u></b>:\n\n' \
               f'üìê<i>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è:</i> <b>{marks[0]}</b>\n' \
               f'üñ•<i>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–ª–≥–µ–±—Ä—ã:</i> <b>{marks[1]}</b>\n' \
               f'üìè<i>–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞:</i> <b>{marks[2]}</b>\n' \
               f'üá¨üáß<i>–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:</i> <b>{marks[3]}</b>\n' \
               f'üí∏<i>–ö–æ—Ä—Ä—É–ø—Ü–∏—è –∏ –µ–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å:</i> <b>{marks[4]}</b>\n' \
               f'üìà<i>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</i> <b>{marks[5]}</b>\n' \
               f'üõ†<i>–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞:</i> <b>{marks[6]}</b>\n' \
               f'üíª<i>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:</i> <b>{marks[7]}</b>\n' \
               f'üó£<i>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:</i> <b>{marks[8]}</b>\n' \
               f'üèÄ<i>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç:</i> <b>{marks[9]}</b>\n' \
               f'üèãÔ∏è‚Äç‚ôÇÔ∏è<i>–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–µ –∏ —Å–ø–æ—Ä—Ç—É:</i> <b>{marks[10]}</b>\n' \
               f'‚òëÔ∏è<i>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –º–æ–¥—É–ª—å:</i> <b>{marks[11] / 100}</b>'.replace('nan', '0')

    elif number_of_control == 0:

        marks = []
        for i in range(1, len(df[0].iloc[0])):
            marks.append(df[0].iloc[number_of_control, i])

        text = f'<b><u>{conrol_names[number_of_control]}</u></b>:\n\n' \
               f'üìê<i>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è:</i> <b>{marks[0]}</b>\n' \
               f'üìè<i>–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞:</i> <b>{marks[2]}</b>\n' \
               f'üá¨üáß<i>–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:</i> <b>{marks[3]}</b>\n' \
               f'üìà<i>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</i> <b>{marks[5]}</b>\n' \
               f'üíª<i>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:</i> <b>{marks[7]}</b>\n'.replace('nan', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')

    elif number_of_control == 1:

        marks = []
        for i in range(1, len(df[0].iloc[0])):
            marks.append(df[0].iloc[number_of_control, i])

        text = f'<b><u>{conrol_names[number_of_control]}</u></b>:\n\n' \
               f'üñ•<i>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–ª–≥–µ–±—Ä—ã:</i> <b>{marks[1]}</b>\n' \
               f'üí∏<i>–ö–æ—Ä—Ä—É–ø—Ü–∏—è –∏ –µ–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å:</i> <b>{marks[4]}</b>\n' \
               f'üõ†<i>–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞:</i> <b>{marks[6]}</b>\n' \
               f'üó£<i>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:</i> <b>{marks[8]}</b>\n' \
               f'üèÄ<i>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç:</i> <b>{marks[9]}</b>\n' \
               f'üèãÔ∏è‚Äç‚ôÇÔ∏è<i>–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–µ –∏ —Å–ø–æ—Ä—Ç—É:</i> <b>{marks[10]}</b>\n'.replace('nan', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')

    return text
