import pandas as pd
import requests
from pathlib import Path
from json import loads


def vuz2_request(chat_id: int, type_of_control: str) -> str:
    """–î–µ–ª–∞–µ—Ç –ø–∞—Ä—Å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å http://vuz2.bru.by/rate/"""

    path = Path('bot', 'data', 'databases', 'vuz2_list', 'vuz2_list.json')
    with open(path, 'r', encoding='utf-8') as vuz2_list:
        vuz2_list = loads(vuz2_list.read())

    vuz2_user_id = vuz2_list[str(chat_id)]

    url = f'http://vuz2.bru.by/rate/{str(vuz2_user_id)}/'
    result = requests.get(url)
    table_html = result.content.decode(encoding="cp1251", errors="ignore")
    table_start = table_html.find("<table")
    table_end = table_html.find("</table>") + 8
    table = table_html[table_start: table_end]
    df = pd.read_html(table)

    list_of_controls = list(df[0].iloc[:, 0])  # –í–∏–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
    items = list(df[0])[1:-1]  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    # –ò—â–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
    number_of_control = 0
    if type_of_control == '–≠–∫–∑–∞–º–µ–Ω –î–∞—Ç–∞':  # –≠–∫–∑–∞–º–µ–Ω—ã - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        number_of_control = 0
    elif type_of_control == '–ó–∞—á—ë—Ç –î–∞—Ç–∞':  # –ó–∞—á—ë—Ç—ã - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        number_of_control = 1
    else:  # –û—Å—Ç–∞–≤—à–∏–µ—Å—è - –º–æ–¥—É–ª–∏, —Ç—É—Ç –º–æ–≥—É—Ç –±—ã—Ç—å: 1-—ã–π –º–æ–¥—É–ª—å, 2-–æ–π –º–æ–¥—É–ª—å, –ò—Ç–æ–≥–æ–≤—ã–π –º–æ–¥—É–ª—å
        number_of_control = list_of_controls.index(type_of_control)

    # –ë–∞–ª–ª—ã –±–µ–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ
    marks = [df[0].iloc[number_of_control, i] for i in range(1, len(df[0].iloc[0]) - 1)]

    # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    avarage_mark = df[0].iloc[number_of_control, -1]
    if len(str(avarage_mark)) in (3, 4):  # –°—Ç–∞–≤–∏–º —Ç–æ—á–∫—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
        avarage_mark /= 100

    name_of_control = {
        '–≠–∫–∑–∞–º–µ–Ω –î–∞—Ç–∞': 'üìù–≠–∫–∑–∞–º–µ–Ω—ã',
        '–ó–∞—á—ë—Ç –î–∞—Ç–∞': 'üìñ–ó–∞—á—ë—Ç—ã',
        '1-—ã–π –º–æ–¥—É–ª—å': '1Ô∏è‚É£–ü–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å',
        '2-–æ–π –º–æ–¥—É–ª—å': '2Ô∏è‚É£–í—Ç–æ—Ä–æ–π –º–æ–¥—É–ª—å',
        '–ò—Ç–æ–≥–æ–≤—ã–π –º–æ–¥—É–ª—å': '‚úÖ–ò—Ç–æ–≥–æ–≤—ã–π –º–æ–¥—É–ª—å'}
    control = name_of_control[type_of_control]

    # –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤–∏–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è
    text = f'<b>{control}:</b>\n'

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for item, mark in zip(items, marks):
        # –î–ª—è –º–æ–¥—É–ª–µ–π
        if type_of_control in ('1-—ã–π –º–æ–¥—É–ª—å', '2-–æ–π –º–æ–¥—É–ª—å', '–ò—Ç–æ–≥–æ–≤—ã–π –º–æ–¥—É–ª—å'):
            if mark != '-':  # –í —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–∞–µ–º —Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –º–æ–¥—É–ª–µ–π
                text += f'‚ú¶<i>{item}</i>: <b>{mark}</b>\n'.replace('nan', '0')
        else:  # –î–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤/–∑–∞—á—ë—Ç–æ–≤
            if mark != '-':  # –í —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–∞–µ–º —Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç —ç–∫–∑–∞–º–µ–Ω–∞/–∑–∞—á—ë—Ç–∞
                text += f'‚ú¶<i>{item}</i>: <b>{mark}</b>\n'.replace('nan', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º
    text += f'‚ú¶<i>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</i>: <b>{avarage_mark}</b>'

    return text
